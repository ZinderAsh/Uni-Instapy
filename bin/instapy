#!usr/bin/env python3
import argparse
import cv2
import instapy.python_color2gray as py_gray
import instapy.numpy_color2gray as numpy_gray
import instapy.numba_color2gray as numba_gray
import instapy.python_color2sepia as py_sepia
import instapy.numpy_color2sepia as numpy_sepia
import instapy.numba_color2sepia as numba_sepia

parser = argparse.ArgumentParser(description="Process some integers.")

parser.add_argument("-f", "--file", nargs=1, action="store", required=True,
    help="The filename of file to apply filter to.")

parser.add_argument("-o", "--out", nargs=1, action="store",
    help="The output filename.")

group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-g", "--gray", action="store_true",
    help="Select gray filter.")
group.add_argument("-se", "--sepia", action="store_true",
    help="Select sepia filter.")

parser.add_argument("-sc", "--scale", nargs=1, type=float,
    help="Scale factor to resize image.")

parser.add_argument("-i", "--implement", nargs=1, default="numpy",
    choices=["python", "numpy", "numba"],
    help="Choose the implementation (default: numpy).")

args = parser.parse_args()

image = cv2.imread(args.file[0])

if (args.scale):
    image = cv2.resize(image, (0, 0), fx=args.scale[0], fy=args.scale[0])

if (args.gray):
    if args.implement == "python":
        image = py_gray.grayscale_filter(image)
    elif args.implement == "numpy":
        image = numpy_gray.grayscale_filter(image)
    else:
        image = numba_gray.grayscale_filter(image)
else:
    if args.implement == "python":
        image = py_sepia.sepia_filter(image)
    elif args.implement == "numpy":
        image = numpy_sepia.sepia_filter(image)
    else:
        image = numba_sepia.sepia_filter(image)

if (args.out):
    cv2.imwrite(args.out[0], image)
